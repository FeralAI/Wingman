@page "/common/method-info-extensions"
@layout ClassLayout

@using System.Threading.Tasks
@using NETStandardLibrary.Common

<strong>InvokeAsync()</strong>
<p>Invokes an async method using reflection.</p>
<p>Given the following code:</p>
<pre>
class SimpleMath
{
	public async Task&lt;int&gt; AddAsync(int x, int y)
	{
		return await Task.FromResult(x + y);
	}
}
</pre>
<p>You can invoke the AddAsync method like this:</p>
<pre>
var simpleMath = new SimpleMath();
var method = simpleMath.GetType().GetMethod("AddAsync");
var result = (int)(await method.InvokeAsync(simpleMath, 1, 1));
Console.WriteLine(result); // 2
</pre>

<p>Try this form using the InvokeAsync() call:</p>
<form>
	<div class="form-group">
		<label for="x">X</label>
		<input type="number" id="x" class="form-control" @bind="x" />
	</div>
	<div class="form-group">
		<label for="y">Y</label>
		<input type="number" id="y" class="form-control" @bind="y" />
	</div>
	<button type="button" class="btn btn-primary" @onclick="AddAsync">Add (Async!)</button>
</form>

@if (result != null)
{
	<p>The result is: @result</p>
}

@code {
	class SimpleMath
	{
		public async Task<int> AddAsync(int x, int y)
		{
			return await Task.FromResult(x + y);
		}
	}

	int? result;
	int? x;
	int? y;

	protected async Task AddAsync()
	{
		await Task.Run(() => result = null);
		var simpleMath = new SimpleMath();
		var method = simpleMath.GetType().GetMethod("AddAsync");
		result = (int)(await method.InvokeAsync(simpleMath, x, y));
	}
}
